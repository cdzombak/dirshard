---
name: CI

"on":
  push:
    branches:
      - "main"
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - "main"

permissions:
  contents: read

jobs:

  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      issues: write
      pull-requests: write
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Run MegaLinter
        id: ml
        uses: oxsecurity/megalinter@v7
        env:
          # See https://megalinter.io/configuration and .mega-linter.yml
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Archive MegaLinter artifacts
        if: ( !env.ACT && ( success() || failure() ) )
        uses: actions/upload-artifact@v3
        with:
          name: MegaLinter artifacts
          path: |
            megalinter-reports
            mega-linter.log


  build-docker:
    name: Build Docker images
    # needs: lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Derive version string
        id: bin_version
        run: >-
          echo "::set-output name=BIN_VERSION::$(./.bin-version)"

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            cdzombak/dirshard
            ghcr.io/cdzombak/dirshard
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/386,linux/arm/v7,linux/arm/v6
          builder: ${{ steps.buildx.outputs.name }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BIN_VERSION=${{ steps.bin_version.outputs.BIN_VERSION }}

      - name: Inspect
        run: |
          docker buildx imagetools inspect cdzombak/dirshard:latest
          docker buildx imagetools inspect ghcr.io/cdzombak/dirshard:latest

      - name: Update Docker Hub description
        if: github.event_name != 'pull_request'
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: cdzombak/dirshard
          readme-filepath: ./README.md
          short-description: "Produce path fragments from a filename"


  build-binaries:
    name: Build & Release Binaries
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: stable

      - name: Go version
        run: go version

      - name: Build all
        run: make all

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dirshard binaries
          path: out/dirshard-*

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: out/dirshard-*
          fail_on_unmatched_files: true
          generate_release_notes: true
