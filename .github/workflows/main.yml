---
name: CI

"on":
  push:
    branches:
      - "main"
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - "main"

permissions:
  contents: read

jobs:

  meta:
    name: Derive Build Metadata
    id: meta
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Derive version string
        id: bin_version
        run: echo "bin_version=$(./.version.sh)" >> $GITHUB_OUTPUT
      - run: 'echo version: ${{ steps.bin_version.outputs.bin_version }}'
    outputs:
      is_prerelease: >-
            ${{
              startsWith(github.ref, 'refs/tags/v') &&
                (contains(github.ref, '-alpha.')
                || contains(github.ref, '-beta.')
                || contains(github.ref, '-rc.'))
            }}
      is_release: >-
            ${{
              startsWith(github.ref, 'refs/tags/v') &&
                !(contains(github.ref, '-alpha.')
                || contains(github.ref, '-beta.')
                || contains(github.ref, '-rc.'))
            }}
      is_pull_request: ${{ github.event_name != 'pull_request' }}
      bin_version: ${{ steps.bin_version.outputs.bin_version }}


  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      issues: write
      pull-requests: write
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Run MegaLinter
        id: ml
        uses: oxsecurity/megalinter@v7
        env:
          # See https://megalinter.io/configuration and .mega-linter.yml
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Archive MegaLinter artifacts
        if: ( !env.ACT && ( success() || failure() ) )
        uses: actions/upload-artifact@v3
        with:
          name: MegaLinter artifacts
          path: |
            megalinter-reports
            mega-linter.log


  build-docker:
    name: Build & Push Docker Images
    needs: [lint, meta]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        if: needs.meta.outputs.is_pull_request != 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        if: needs.meta.outputs.is_pull_request != 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: |
            cdzombak/dirshard
            ghcr.io/cdzombak/dirshard
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/386,linux/arm/v7,linux/arm/v6
          builder: ${{ steps.buildx.outputs.name }}
          push: ${{ needs.meta.outputs.is_pull_request != 'true' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          build-args: |
            BIN_VERSION=${{ needs.meta.outputs.bin_version }}

      - name: Inspect
        run: |
          docker buildx imagetools inspect cdzombak/dirshard:latest
          docker buildx imagetools inspect ghcr.io/cdzombak/dirshard:latest

      - name: Update Docker Hub description
        if: needs.meta.outputs.is_release == 'true'
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: cdzombak/dirshard
          readme-filepath: ./README.md
          short-description: "Produce path fragments from a filename"


  build-binaries:
    name: Build Binaries & Debian Packages
    id: binaries
    needs: [lint, meta]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: stable
      - run: go version

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      - run: ruby --version
      - name: Install fpm
        run: |
          gem install --no-document fpm -v 1.15.1

      - name: Build binaries & packages
        run: make package
      - name: Upload binaries & packages
        uses: actions/upload-artifact@v3
        with:
          name: dirshard Binaries and Packages
          path: out/dirshard-*


  release-binaries:
    name: Create GitHub Release
    needs: [meta, binaries]
    if: >-
          needs.meta.outputs.is_release == 'true' ||
          needs.meta.outputs.is_prerelease == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      - name: Download binaries & packages
        uses: actions/download-artifact@v3
        id: download
        with:
          name: dirshard Binaries and Packages
          path: out
      - run: ls -R
        working-directory: ${{steps.download.outputs.download-path}}

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{steps.download.outputs.download-path}}/dirshard-*
          prerelease: ${{ needs.meta.outputs.is_prerelease == 'true' }}
          fail_on_unmatched_files: true
          generate_release_notes: true


  push-binaries:
    name: Push to PackageCloud
    needs: [meta, binaries]
    if: needs.meta.outputs.is_release == 'true'
    runs-on: ubuntu-latest
    steps:

      - name: Download binaries & packages
        uses: actions/download-artifact@v3
        id: download
        with:
          name: dirshard Binaries and Packages
          path: out
      - run: ls -R
        working-directory: ${{steps.download.outputs.download-path}}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
        run: ruby --version
      - name: Install package_cloud
        run: |
          gem install --no-document package_cloud

      - name: Push to PackageCloud
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
        run: |
          package_cloud push --yes cdzombak/oss/any/any ${{steps.download.outputs.download-path}}/*.deb


  release-homebrew:
    name: Update Homebrew Tap
    needs: [meta, binaries]
    if: needs.meta.outputs.is_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Release to cdzombak/oss tap
        uses: Justintime50/homebrew-releaser@v1
        with:
          homebrew_owner: cdzombak
          homebrew_tap: homebrew-oss
          formula_folder: formula
          update_readme_table: true
          github_token: ${{ secrets.HOMEBREW_RELEASER_PAT }}
          commit_owner: homebrew-releaser-bot
          commit_email: homebrew-releaser-bot@users.noreply.github.com

          target_darwin_amd64: true
          target_darwin_arm64: true
          target_linux_amd64: true
          target_linux_arm64: true

          install: 'bin.install "dirshard"'
          test: 'assert_match("${{ steps.bin_version.outputs.BIN_VERSION }}", shell_output("dirshard -version"))'
